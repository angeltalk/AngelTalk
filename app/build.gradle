apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'org.sonarqube'

apply from: 'sonarqube.gradle'
apply plugin: 'jacoco'


android {
    compileSdkVersion 23
    buildToolsVersion '25.0.2'
    useLibrary 'org.apache.http.legacy'

    signingConfigs {
        debug {
            storeFile file("../angelman.jks")
            storePassword "angel123\$"
            keyAlias "angelman"
            keyPassword "angel123\$"
        }
    }

    defaultConfig {
        applicationId "act.angelman"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 14
        versionName "2.3"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            jvmArgs '-Xmx2g', '-XX:MaxPermSize=1024m', '-XX:+HeapDumpOnOutOfMemoryError'
            jacoco {
                includeNoLocationClasses = true
            }
            forkEvery = 10
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = false
            signingConfig signingConfigs.debug
            applicationVariants.all { variant -> renameAPK(variant) }
        }
        release {
            testCoverageEnabled = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant -> renameAPK(variant) }
        }
    }
    lintOptions {
        abortOnError false
    }
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "${project.buildDir}/intermediates/classes/debug",
            includes: [
                    '**/**/*',
            ],
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'com/android/**/*.class',
                       '**/AngelmanApplication.class',
                       '**/TestAngelmanApplication.class',
                       '**/UITest.class',
                       '**/Dagger*.class',
                       '**/*Test*.class',
                       '**/*ViewBinding*.class',
                       '**/*Builder.class',
                       '**/AngelmanComponent.class',
                       '**/AngelmanModule*.class',
                       '**/*$ViewInjector*.*',
                       '**/*_MembersInjector*.*',
                       '**/*$ModuleAdapter*.*',
                       '**/*$InjectAdapter*.*',
                       '**/*$ViewBinder*.*',
                       '**/*Shadow*.class',
                       '**/Camera2Activity*.class',
                       '**/VideoFragment*.class',
                       '**/VideoCardTextureView*.class',
                       '**/*Transfer*.class',
                       '**/DatabaseHelper.class',
                       '**/AbstractActivity.class'

            ]
    )

    def coverageSourceDirs = ["../app/src/main/java"]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("${project.buildDir}/jacoco/testDebugUnitTest.exec")

    reports {
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        csv.enabled false
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/html"
        }
    }
}

def renameAPK(variant) {
    variant.outputs.each { output ->
        def file = output.packageApplication.outputFile
        def fileName = "AngelTalk.apk"
        output.packageApplication.outputFile = new File(file.parent, fileName)
    }
}

def robolectricVersion = "3.1.4"

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile('com.squareup.assertj:assertj-android:1.1.1') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile "org.robolectric:robolectric:$robolectricVersion"
    testCompile "org.robolectric:shadows-support-v4:$robolectricVersion"
    testCompile "org.robolectric:robolectric-annotations:$robolectricVersion"
    testCompile "org.robolectric:shadows-core:$robolectricVersion"
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.dagger:dagger-compiler:2.7'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:support-v13:23.1.1'
    compile 'com.android.support:percent:23.4.0'

    compile 'com.google.guava:guava:19.0'
    compile 'me.everything:overscroll-decor-android:1.0.3'
    compile 'jp.wasabeef:blurry:2.0.3'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.romandanylyk:pageindicatorview:0.0.7'
    compile 'ch.acra:acra:4.9.0'
    compile 'com.google.dagger:dagger:2.7'
    compile 'org.projectlombok:lombok:1.16.10'
    compile 'com.jakewharton:butterknife:8.4.0'
    compile 'com.google.firebase:firebase-database:10.2.0'
    compile 'com.google.firebase:firebase-storage:10.2.0'
    compile 'com.google.firebase:firebase-auth:10.2.0'
    compile 'com.kakao.sdk:kakaolink:1.1.36'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.tsengvn:typekit:1.0.1'
    

    androidTestApt 'com.google.dagger:dagger-compiler:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    provided 'javax.annotation:jsr250-api:1.0'
}

apply plugin: 'com.google.gms.google-services'